classdef utils
    methods(Static)
<<<<<<< HEAD
        function [u,sqr] = sqr(sx,sPDF,sample)
            Ns = length(sample);
            x = sort(sample);
            sx = sort(sx);
            pL = (0.5)/Ns;          %probability for data to be  left of window
            pR = (0.5)/Ns;          %probability for data to be right of window
            pNorm = 1 - pL - pR;    %probability for data to fall within window
            sCDF = zeros( size(sPDF) );
            %--------------------------------------------------------------
            sCDF(1) = 0;
            kmax = length(sCDF);
%             disp(['length(sCDF): ',num2str(kmax)])
            %pause
            for k=2:kmax
                fave = 0.5*( sPDF(k) + sPDF(k-1) );
                area = fave*( sx(k) - sx(k-1) );
                sCDF(k) = sCDF(k-1) + area;
                %disp(['fave: ',num2str(fave),'  area: ',num2str(area),'  sCDF(k): ',num2str(sCDF(k))])
            end
            temp = sCDF(kmax);
            % sCDF = sCDF/temp;  % recalling what pL, pR and pNorm are
            sCDF = pNorm*(sCDF/temp) + pL;  % recalling what pL, pR and pNorm are
            %pL = (0.5 + nLoutliers)/Ns;    probability for data to be  left of window
            %pR = (0.5 + nRoutliers)/Ns;    probability for data to be right of window
            %pNorm = 1 - pL - pR;           probability for data to fall within window
            sample = x(2:end-1);
            %----------------------------------------------- adjust u range
            sampleUpLim = max(sx);
            sampleLoLim = min(sx);
            [row, ~] = find(sample <= sampleUpLim & sample >= sampleLoLim);
            % disp('sample size')
            % disp(size(sample))
            u = interp1(sx,sCDF,sample);    % get corresponding u for each x in sample
            %             u = interp1(sx,sCDF,sample(row));    % get corresponding u for each x in sample
            % figure('Name','interp1 figure')
            % hold on
            % plot(sx,sCDF,'.r')
            % plot(sample,1,'xb')
            % plot(sample(row),u,'om')
            % legend('sCDF','sample','u')
            % pause
            %--------------------------------------------------------------------------
            % original
            %uref = (1:Ns-2)/(Ns - 1);              % both end points have been removed
            uref = (1:Ns-2)/(Ns - 1);
            %             uref = (1:size(sample(row),1))/(size(sample(row),1) - 1);
            if( size(uref,1) ~= size(u,1) )
                u = u';
            end
            % --------------------------------------------------- get scaled residual
            % disp(['size u: ',num2str(size(u)),' uref: ',num2str(size(uref))])
            % disp(['min u: ',num2str(min(u)),' min uref: ',num2str(min(uref))])
            % disp(['max u: ',num2str(max(u)),' max uref: ',num2str(max(uref))])
            % disp(u)
            % pause
            u = sort(u);
            % issue with u having NaNs: from sample range being outside of sx range
            sqr = sqrt(Ns)*(u - uref); % normal formula has sqrt(Ns+2) but Ns -> Ns-2
        end
        
        function [sampleVec] = sample_pow(minSamplesExp,maxSamplesExp,dataTypeflag,step)
            % to be function inputs
            %--------------------------------------------------------------------------
            %step = 1; %<---- can be changed to skip number of samples created
            %minSamplesExp;
            %maxSamplesExp;
            %dataTypeflag = true; %<--- true/false integer powers of 2/real powers of 2
            
            % Define a vector of samples to generate
            %--------------------------------------------------------------------------
=======
<<<<<<<< HEAD:nmem/misc_functions.m
        function [outCounts] = countSQR(u, sqr)
            outCounts = zeros(3, 1);
            total = length(sqr);
            [a99, a90, a75, ~, b75, b90, b99] = GetTargets(length(u));

            idxOut = [find(sqr > a99), find(sqr < b99)];
            outCounts(1) = length(idxOut) / total;

            idxOut = [find(sqr > a90), find(sqr < b90)];
            outCounts(2) = length(idxOut) / total;

            idxOut = [find(sqr > a75), find(sqr < b75)];
            outCounts(3) = length(idxOut) / total;
        end
        function plotBoth(y, py, u, sqr)
            redColor = [[0.65,0.078,0.18]];
            blueColor = [45/255, 66/255, 133/255];
            hBoth = figure;
            fBoth = axes('parent', hBoth);
            hold on;
            yyaxis(fBoth, 'right');
            set(fBoth, 'ycolor', blueColor);
            
            [topThreshold, bottomThreshold] = PlotBeta(u, true);
            idxOut = [find(sqr' > topThreshold), find(sqr' < bottomThreshold)];
            idxIn =  intersect(find(sqr' < topThreshold), find(sqr' > bottomThreshold)); 
            ylim(fBoth, [-2 2]);
            plot([min(u), max(u)], [-2, -2], 'color', 'black');
            ylabel('SQR');
                     
            plot(fBoth, u(idxOut), sqr(idxOut), '.', 'color', redColor);
            plot(fBoth, u(idxIn), sqr(idxIn), '.', 'color', blueColor);                   
            yyaxis(fBoth, 'left');
            plot(fBoth, y, py, '-', 'color', 'black');                     
                        
            [~, idxUnique, ~] = unique(py);
            if length(idxUnique) > 1
                sampleOut = interp1(y(idxUnique), py(idxUnique), u(idxOut));
                plot(fBoth, u(idxOut), sampleOut, '.', 'color', redColor);
            end
            
            set(gca, 'SortMethod', 'depth');                         
            fBoth.YColor = 'k';
            ylabel('PDF');                 
            xlabel('Sample Range');
        end
         function plotSQR(u, sqr)
            redColor = [[0.65,0.078,0.18]];
            blueColor = [45/255, 66/255, 133/255];
            hSQR = figure;
            fSQR = axes('parent', hSQR);
            [topThreshold, bottomThreshold] = PlotBeta(u, false);
            n = length(sqr);
            dx = 1 / (n + 1);
            x = dx:dx:(n * dx);
            idxOut = [find(sqr' > topThreshold), find(sqr' < bottomThreshold)];
            idxIn =  intersect(find(sqr' < topThreshold), find(sqr' > bottomThreshold)); 
            if n > 1000
                plot(fSQR, x(idxOut), sqr(idxOut), '.', 'color', redColor);
                plot(fSQR, x(idxIn), sqr(idxIn), '.', 'color', blueColor);
            else
                plot(fSQR, x(idxOut), sqr(idxOut), '.', 'color', redColor, 'MarkerSize', 10);
                plot(fSQR, x(idxIn), sqr(idxIn), '.', 'color', blueColor, 'MarkerSize', 10); 
            end
            xlabel('Mean');
            ylabel('SQR');
        end
        function [u,sqr] = sqr(sx,sPDF,sample)
========
        function [u,sqr] = sqr(sx,pdf,sample)
>>>>>>>> distro_code:functions/utils.m
            Ns = length(sample);
            x = sort(sample);
            sx = sort(sx);
            pL = (0.5)/Ns;
            pR = (0.5)/Ns;
            pNorm = 1 - pL - pR;
            cdf = zeros( size(pdf) );

            cdf(1) = 0;
            kmax = length(cdf);
            for k=2:kmax
                fave = 0.5*( pdf(k) + pdf(k-1) );
                area = fave*( sx(k) - sx(k-1) );
<<<<<<<< HEAD:nmem/misc_functions.m
                sCDF(k) = sCDF(k-1) + area;
            end
            temp = sCDF(kmax);
            sCDF = pNorm*(sCDF/temp) + pL;  % recalling what pL, pR and pNorm are
            sample = x;%(2:end-1);
            sampleUpLim = max(sx);
            sampleLoLim = min(sx);
            [row, ~] = find(sample <= sampleUpLim & sample >= sampleLoLim);
            u = interp1(sx,sCDF,sample);    % get corresponding u for each x in sample
            %             u = interp1(sx,sCDF,sample(row));    % get corresponding u for each x in sample
          
           
%             uref = (1:Ns-2)/(Ns - 1);
            uref = (1:Ns)/(Ns + 1);
            %             uref = (1:size(sample(row),1))/(size(sample(row),1) - 1);
========
                cdf(k) = cdf(k-1) + area;
            end

            % recalling what pL, pR and pNorm are
            cdf = pNorm*(cdf/cdf(kmax)) + pL;
            sample = x(2:end-1);

            % get corresponding u for each x in sample
            u = interp1(sx,cdf,sample);
          
            uref = (1:Ns-2)/(Ns - 1);
>>>>>>>> distro_code:functions/utils.m
            if( size(uref,1) ~= size(u,1) )
                u = u';
            end
            u = sort(u);
            sqr = sqrt(Ns)*(u - uref);
        end
        
        function [sampleVec] = sample_pow(minSamplesExp,maxSamplesExp,...
                dataTypeflag,step)
            
            % Define a vector of samples to generate
>>>>>>> distro_code
            exponents = minSamplesExp:step:maxSamplesExp;
            sampleVec = zeros(1,length(exponents));
            if dataTypeflag
                % Generates vector of samples from integer power 2
<<<<<<< HEAD
                sampleVec(1:length(exponents)) = 2.^exponents(1:length(exponents));
=======
                sampleVec(1:length(exponents)) = ...
                    2.^exponents(1:length(exponents));
>>>>>>> distro_code
            else
                % Generates vector of samples from real power 2
                for i = 1:length(exponents)
                    n = minSamplesExp + i + rand;
                    sampleVec(i) = floor(2^n);
                end
            end
        end
        
<<<<<<< HEAD
        function stitch_results_plot(plotQQandSQR,uref,u,msgModelType,Ns,prefix,saveFIG,sqr)
            if plotQQandSQR
                figure('Name','SQR and QQ Plots')
                subplot(2,1,1)
                hold off;
                plot(uref,u,'-k','linewidth',1.0);
                xlabel('exact quantile');
                ylabel('empirical quantile');
                title(['QQ-plot:  ',msgModelType,'  N_s = ',num2str(Ns)]);
                xlim([0,1])
                
                subplot(2,1,2)
                hold on;
                % create lemon drop oval in gray scale
                smallN = 256;
                smallN2 = 258;
                graymax = 220;
                range = 0:1/(smallN+1):1;
                muLD = range*(smallN + 1) / (smallN + 1);
                lemonDrop = sqrt(muLD.*(1-muLD)) * 3.4;
                sampleCount2 = (smallN + 2):-1:1;
                colorRange = (255-graymax)*sampleCount2/(smallN + 2);
                base = repmat(graymax, smallN + 2, 1);
                col = (base + colorRange') / 255;
                rgb = [col col col];
                count2 = 1;
                
                for ii = ceil(smallN2/2):smallN2-1
                    ix = [ii ii+1 smallN2-ii smallN2-ii+1];
                    fill(range(ix), lemonDrop(ix), rgb(count2, :),'edgecolor','none')
                    fill(range(ix), -lemonDrop(ix), rgb(count2, :),'edgecolor','none')
                    count2 = count2 + 2;
                end
                hb1 = plot(muLD,lemonDrop,'k--');
                hb2 = plot(muLD,-lemonDrop,'k--');
                % ---------------------------------------------------------
                plot(u,sqr,'-k');
                xlabel('exact quantile');
                ylabel('SQR');
                title(['SQR-plot:  ',msgModelType,'  N_s = ',num2str(Ns)]);
                if saveFIG
                    fig5Name = [prefix,'_QQSQR'];
                    savefig(fig5Name);
                end
            end
        end
        
        function val = likelihood()
            % function to hold loglikelhood function data
=======
        function val = likelihood()
            % hold loglikelhood function data
>>>>>>> distro_code
            val = [-5.99230836533,4.57069309023e-06
                -5.982836708,9.38049450812e-06
                -5.97336505068,1.44855544081e-05
                -5.96389339335,1.99436284053e-05
                -5.95442173602,2.58147407e-05
                -5.94495007869,3.2161624036e-05
                -5.93547842137,3.90499536352e-05
                -5.92600676404,4.65483813208e-05
                -5.91653510671,5.47283698084e-05
                -5.90706344938,6.36638246233e-05
                -5.89759179206,7.34305216369e-05
                -5.88812013473,8.41053313273e-05
                -5.8786484774,9.57652461322e-05
                -5.86917682008,0.000108486224217
                -5.85970516275,0.000122341871103
                -5.85023350542,0.000137401989306
                -5.84076184809,0.000153731034728
                -5.83129019077,0.000171386526355
                -5.82181853344,0.000190417462162
                -5.81234687611,0.000210862798295
                -5.80287521878,0.00023275005025
                -5.79340356146,0.0002560940734
                -5.78393190413,0.00028089607581
                -5.7744602468,0.000307142908936
                -5.76498858948,0.000334806671764
                -5.75551693215,0.000363844651913
                -5.74604527482,0.000394199613692
                -5.73657361749,0.000425800429097
                -5.72710196017,0.000458563033887
                -5.71763030284,0.000492391678158
                -5.70815864551,0.000527180429834
                -5.69868698818,0.000562814880873
                -5.68921533086,0.000599174000048
                -5.67974367353,0.000636132073106
                -5.6702720162,0.00067356067098
                -5.66080035887,0.000711330589195
                -5.65132870155,0.000749313706441
                -5.64185704422,0.000787384717001
                -5.63238538689,0.000825422699694
                -5.62291372957,0.000863312494824
                -5.61344207224,0.00090094586973
                -5.60397041491,0.000938222462327
                -5.59449875758,0.000975050500353
                -5.58502710026,0.00101134730132
                -5.57555544293,0.00104703956443
                -5.5660837856,0.00108206347049
                -5.55661212827,0.00111636460996
                -5.54714047095,0.00114989776096
                -5.53766881362,0.00118262654118
                -5.52819715629,0.00121452295715
                -5.51872549896,0.00124556687421
                -5.50925384164,0.00127574542889
                -5.49978218431,0.00130505240394
                -5.49031052698,0.00133348758378
                -5.48083886966,0.00136105610595
                -5.47136721233,0.0013877678219
                -5.461895555,0.00141363667754
                -5.45242389767,0.00143868012233
                -5.44295224035,0.00146291855314
                -5.43348058302,0.00148637479736
                -5.42400892569,0.00150907363803
                -5.41453726836,0.00153104138247
                -5.40506561104,0.00155230547441
                -5.39559395371,0.00157289414902
                -5.38612229638,0.00159283612919
                -5.37665063905,0.00161216036095
                -5.36717898173,0.00163089578561
                -5.3577073244,0.00164907114572
                -5.34823566707,0.00166671482206
                -5.33876400975,0.00168385469864
                -5.32929235242,0.00170051805275
                -5.31982069509,0.00171673146731
                -5.31034903776,0.00173252076272
                -5.30087738044,0.00174791094575
                -5.29140572311,0.00176292617304
                -5.28193406578,0.00177758972708
                -5.27246240845,0.00179192400271
                -5.26299075113,0.00180595050238
                -5.2535190938,0.00181968983849
                -5.24404743647,0.00183316174152
                -5.23457577915,0.00184638507273
                -5.22510412182,0.0018593778402
                -5.21563246449,0.00187215721745
                -5.20616080716,0.00188473956372
                -5.19668914984,0.00189714044537
                -5.18721749251,0.00190937465759
                -5.17774583518,0.00192145624623
                -5.16827417785,0.00193339852916
                -5.15880252053,0.00194521411686
                -5.1493308632,0.00195691493212
                -5.13985920587,0.00196851222855
                -5.13038754854,0.00198001660774
                -5.12091589122,0.00199143803514
                -5.11144423389,0.0020027858544
                -5.10197257656,0.0020140688004
                -5.09250091924,0.00202529501077
                -5.08302926191,0.00203647203612
                -5.07355760458,0.00204760684896
                -5.06408594725,0.00205870585147
                -5.05461428993,0.00206977488227
                -5.0451426326,0.00208081922222
                -5.03567097527,0.00209184359955
                -5.02619931794,0.0021028521944
                -5.01672766062,0.00211384864298
                -5.00725600329,0.00212483604161
                -4.99778434596,0.00213581695071
                -4.98831268863,0.00214679339906
                -4.97884103131,0.0021577668885
                -4.96936937398,0.00216873839927
                -4.95989771665,0.00217970839621
                -4.95042605933,0.002190676836
                -4.940954402,0.00220164317561
                -4.93148274467,0.00221260638222
                -4.92201108734,0.00222356494465
                -4.91253943002,0.0022345168865
                -4.90306777269,0.00224545978114
                -4.89359611536,0.00225639076858
                -4.88412445803,0.0022673065744
                -4.87465280071,0.00227820353056
                -4.86518114338,0.00228907759838
                -4.85570948605,0.00229992439348
                -4.84623782872,0.00231073921259
                -4.8367661714,0.00232151706235
                -4.82729451407,0.00233225268978
                -4.81782285674,0.00234294061431
                -4.80835119942,0.00235357516131
                -4.79887954209,0.00236415049671
                -4.78940788476,0.00237466066271
                -4.77993622743,0.00238509961407
                -4.77046457011,0.00239546125495
                -4.76099291278,0.00240573947586
                -4.75152125545,0.00241592819045
                -4.74204959812,0.00242602137191
                -4.7325779408,0.00243601308857
                -4.72310628347,0.00244589753854
                -4.71363462614,0.00245566908297
                -4.70416296881,0.0024653222777
                -4.69469131149,0.00247485190317
                -4.68521965416,0.00248425299215
                -4.67574799683,0.00249352085522
                -4.66627633951,0.00250265110383
                -4.65680468218,0.00251163967069
                -4.64733302485,0.00252048282751
                -4.63786136752,0.00252917719988
                -4.6283897102,0.00253771977936
                -4.61891805287,0.00254610793266
                -4.60944639554,0.00255433940803
                -4.59997473821,0.00256241233882
                -4.59050308089,0.00257032524438
                -4.58103142356,0.00257807702831
                -4.57155976623,0.0025856669743
                -4.56208810891,0.00259309473963
                -4.55261645158,0.00260036034655
                -4.54314479425,0.0026074641717
                -4.53367313692,0.00261440693376
                -4.5242014796,0.00262118967968
                -4.51472982227,0.0026278137694
                -4.50525816494,0.00263428085962
                -4.49578650761,0.0026405928866
                -4.48631485029,0.00264675204827
                -4.47684319296,0.00265276078591
                -4.46737153563,0.00265862176548
                -4.4578998783,0.00266433785886
                -4.44842822098,0.0026699121252
                -4.43895656365,0.00267534779243
                -4.42948490632,0.00268064823921
                -4.420013249,0.0026858169773
                -4.41054159167,0.00269085763459
                -4.40106993434,0.00269577393883
                -4.39159827701,0.0027005697022
                -4.38212661969,0.00270524880664
                -4.37265496236,0.0027098151902
                -4.36318330503,0.0027142728343
                -4.3537116477,0.00271862575204
                -4.34423999038,0.00272287797744
                -4.33476833305,0.00272703355578
                -4.32529667572,0.00273109653495
                -4.31582501839,0.00273507095779
                -4.30635336107,0.00273896085544
                -4.29688170374,0.0027427702417
                -4.28741004641,0.00274650310835
                -4.27793838909,0.00275016342135
                -4.26846673176,0.002753755118
                -4.25899507443,0.00275728210494
                -4.2495234171,0.00276074825699
                -4.24005175978,0.00276415741678
                -4.23058010245,0.00276751339516
                -4.22110844512,0.00277081997234
                -4.21163678779,0.00277408089974
                -4.20216513047,0.00277729990247
                -4.19269347314,0.00278048068253
                -4.18322181581,0.00278362692258
                -4.17375015848,0.00278674229032
                -4.16427850116,0.00278983044345
                -4.15480684383,0.00279289503521
                -4.1453351865,0.00279593972051
                -4.13586352918,0.00279896816253
                -4.12639187185,0.00280198403992
                -4.11692021452,0.0028049910546
                -4.10744855719,0.00280799293998
                -4.09797689987,0.0028109934699
                -4.08850524254,0.00281399646804
                -4.07903358521,0.00281700581795
                -4.06956192788,0.00282002547374
                -4.06009027056,0.00282305947134
                -4.05061861323,0.00282611194052
                -4.0411469559,0.00282918711752
                -4.03167529857,0.00283228935854
                -4.02220364125,0.00283542315391
                -4.01273198392,0.00283859314316
                -4.00326032659,0.00284180413097
                -3.99378866927,0.00284506110408
                -3.98431701194,0.00284836924913
                -3.97484535461,0.00285173397162
                -3.96537369728,0.00285516091606
                -3.95590203996,0.00285865598718
                -3.94643038263,0.00286222537252
                -3.9369587253,0.00286587556634
                -3.92748706797,0.002869613395
                -3.91801541065,0.00287344604375
                -3.90854375332,0.00287738108523
                -3.89907209599,0.00288142650957
                -3.88960043867,0.00288559075631
                -3.88012878134,0.00288988274811
                -3.87065712401,0.00289431192645
                -3.86118546668,0.00289888828929
                -3.85171380936,0.00290362243086
                -3.84224215203,0.00290852558356
                -3.8327704947,0.00291360966213
                -3.82329883737,0.0029188873101
                -3.81382718005,0.0029243719485
                -3.80435552272,0.00293007782702
                -3.79488386539,0.00293602007745
                -3.78541220806,0.00294221476956
                -3.77594055074,0.00294867896926
                -3.76646889341,0.00295543079912
                -3.75699723608,0.00296248950102
                -3.74752557876,0.00296987550099
                -3.73805392143,0.00297761047593
                -3.7285822641,0.00298571742209
                -3.71911060677,0.00299422072516
                -3.70963894945,0.00300314623144
                -3.70016729212,0.00301252132005
                -3.69069563479,0.00302237497551
                -3.68122397746,0.00303273786039
                -3.67175232014,0.00304364238741
                -3.66228066281,0.00305512279039
                -3.65280900548,0.00306721519335
                -3.64333734815,0.00307995767705
                -3.63386569083,0.00309339034193
                -3.6243940335,0.00310755536675
                -3.61492237617,0.00312249706165
                -3.60545071885,0.00313826191473
                -3.59597906152,0.00315489863069
                -3.58650740419,0.0031724581605
                -3.57703574686,0.00319099372053
                -3.56756408954,0.00321056079977
                -3.55809243221,0.00323121715368
                -3.54862077488,0.00325302278303
                -3.53914911755,0.00327603989625
                -3.52967746023,0.00330033285361
                -3.5202058029,0.00332596809162
                -3.51073414557,0.00335301402625
                -3.50126248824,0.00338154093315
                -3.49179083092,0.00341162080378
                -3.48231917359,0.00344332717582
                -3.47284751626,0.00347673493686
                -3.46337585894,0.00351192010032
                -3.45390420161,0.0035489595528
                -3.44443254428,0.00358793077222
                -3.43496088695,0.00362891151671
                -3.42548922963,0.00367197948408
                -3.4160175723,0.00371721194243
                -3.40654591497,0.00376468533264
                -3.39707425764,0.00381447484397
                -3.38760260032,0.00386665396441
                -3.37813094299,0.00392129400797
                -3.36865928566,0.00397846362133
                -3.35918762834,0.00403822827307
                -3.34971597101,0.00410064972884
                -3.34024431368,0.00416578551669
                -3.33077265635,0.0042336883866
                -3.32130099903,0.00430440576947
                -3.3118293417,0.00437797924032
                -3.30235768437,0.00445444399158
                -3.29288602704,0.00453382832193
                -3.28341436972,0.0046161531467
                -3.27394271239,0.00470143153593
                -3.26447105506,0.00478966828602
                -3.25499939773,0.00488085953097
                -3.24552774041,0.00497499239899
                -3.23605608308,0.00507204472003
                -3.22658442575,0.00517198478933
                -3.21711276843,0.00527477119161
                -3.2076411111,0.00538035269021
                -3.19816945377,0.0054886681844
                -3.18869779644,0.00559964673778
                -3.17922613912,0.00571320767962
                -3.16975448179,0.00582926078026
                -3.16028282446,0.00594770650081
                -3.15081116713,0.00606843631625
                -3.14133950981,0.00619133311056
                -3.13186785248,0.00631627164102
                -3.12239619515,0.00644311906833
                -3.11292453782,0.00657173554819
                -3.1034528805,0.00670197487914
                -3.09398122317,0.00683368520082
                -3.08450956584,0.00696670973604
                -3.07503790852,0.00710088756963
                -3.06556625119,0.00723605445648
                -3.05609459386,0.00737204365098
                -3.04662293653,0.00750868674966
                -3.03715127921,0.00764581453903
                -3.02767962188,0.0077832578403
                -3.01820796455,0.00792084834329
                -3.00873630722,0.00805841942154
                -2.9992646499,0.00819580692152
                -2.98979299257,0.00833284991912
                -2.98032133524,0.00846939143697
                -2.97084967791,0.00860527911724
                -2.96137802059,0.00874036584479
                -2.95190636326,0.00887451031666
                -2.94243470593,0.00900757755445
                -2.93296304861,0.00913943935699
                -2.92349139128,0.00926997469163
                -2.91401973395,0.00939907002299
                -2.90454807662,0.00952661957914
                -2.8950764193,0.00965252555555
                -2.88560476197,0.00977669825804
                -2.87613310464,0.00989905618661
                -2.86666144731,0.0100195260624
                -2.85718978999,0.0101380428008
                -2.84771813266,0.0102545494338
                -2.83824647533,0.0103689969856
                -2.828774818,0.0104813443048
                -2.81930316068,0.0105915578581
                -2.80983150335,0.0106996114889
                -2.80035984602,0.0108054861463
                -2.7908881887,0.0109091695872
                -2.78141653137,0.0110106560578
                -2.77194487404,0.0111099459569
                -2.76247321671,0.0112070454863
                -2.75300155939,0.0113019662913
                -2.74352990206,0.0113947250959
                -2.73405824473,0.0114853433349
                -2.7245865874,0.0115738467876
                -2.71511493008,0.0116602652139
                -2.70564327275,0.0117446319976
                -2.69617161542,0.0118269837975
                -2.6866999581,0.0119073602095
                -2.67722830077,0.0119858034402
                -2.66775664344,0.0120623579944
                -2.65828498611,0.0121370703776
                -2.64881332879,0.0122099888137
                -2.63934167146,0.0122811629796
                -2.62987001413,0.0123506437563
                -2.6203983568,0.0124184829973
                -2.61092669948,0.012484733314
                -2.60145504215,0.0125494478789
                -2.59198338482,0.0126126802453
                -2.58251172749,0.0126744841838
                -2.57304007017,0.0127349135349
                -2.56356841284,0.0127940220782
                -2.55409675551,0.0128518634157
                -2.54462509819,0.0129084908701
                -2.53515344086,0.0129639573978
                -2.52568178353,0.0130183155135
                -2.5162101262,0.013071617229
                -2.50673846888,0.0131239140026
                -2.49726681155,0.0131752567003
                -2.48779515422,0.0132256955665
                -2.47832349689,0.0132752802056
                -2.46885183957,0.0133240595714
                -2.45938018224,0.0133720819654
                -2.44990852491,0.013419395043
                -2.44043686758,0.0134660458261
                -2.43096521026,0.0135120807236
                -2.42149355293,0.0135575455563
                -2.4120218956,0.0136024855887
                -2.40255023828,0.0136469455653
                -2.39307858095,0.013690969752
                -2.38360692362,0.0137346019817
                -2.37413526629,0.0137778857037
                -2.36466360897,0.0138208640372
                -2.35519195164,0.0138635798285
                -2.34572029431,0.0139060757104
                -2.33624863698,0.0139483941658
                -2.32677697966,0.0139905775936
                -2.31730532233,0.0140326683772
                -2.307833665,0.014074708956
                -2.29836200767,0.0141167418987
                -2.28889035035,0.0141588099797
                -2.27941869302,0.0142009562576
                -2.26994703569,0.0142432241554
                -2.26047537837,0.0142856575437
                -2.25100372104,0.0143283008257
                -2.24153206371,0.0143703367182
                -2.23225079834,0.0144126608484
                -2.22296953297,0.0144553169834
                -2.2136882676,0.0144983497124
                -2.20440700223,0.0145418045338
                -2.19512573686,0.0145857279431
                -2.18584447149,0.0146301675241
                -2.17656320612,0.0146751720408
                -2.16728194075,0.0147207915316
                -2.15800067538,0.0147670774061
                -2.14871941001,0.0148140825424
                -2.13943814464,0.0148618613875
                -2.13015687927,0.0149104700587
                -2.1208756139,0.0149599664464
                -2.11159434853,0.0150104103199
                -2.10231308316,0.0150618634327
                -2.09303181779,0.0151143896308
                -2.08375055242,0.015168054961
                -2.07446928705,0.0152229277811
                -2.06518802168,0.0152790788701
                -2.05590675631,0.0153365815395
                -2.04662549094,0.0153955117444
                -2.03734422557,0.0154559481948
                -2.0280629602,0.0155179724666
                -2.01878169483,0.0155816691114
                -2.00950042946,0.0156471257657
                -2.00021916408,0.0157144332578
                -1.99093789871,0.0157836857135
                -1.98165663334,0.015854980658
                -1.97237536797,0.0159284191158
                -1.9630941026,0.016004105706
                -1.95381283723,0.0160821487338
                -1.94453157186,0.0161626602766
                -1.93525030649,0.0162457562649
                -1.92596904112,0.0163324506295
                -1.91659106126,0.0164220330705
                -1.90721308139,0.016514635578
                -1.89783510153,0.0166103944217
                -1.88845712166,0.0167094501945
                -1.8790791418,0.0168119478461
                -1.86970116193,0.0169180367046
                -1.86032318207,0.0170278704869
                -1.8509452022,0.0171416072955
                -1.84156722234,0.0172594096031
                -1.83218924247,0.0173814442224
                -1.82281126261,0.017507882262
                -1.81343328274,0.0176388990669
                -1.80405530288,0.017774674145
                -1.79467732301,0.0179153910774
                -1.78529934315,0.0180612374131
                -1.77592136328,0.0182124045493
                -1.76654338342,0.0183690875957
                -1.75716540355,0.0185314852239
                -1.74778742369,0.0186997995031
                -1.73840944382,0.0188742357213
                -1.72903146396,0.0190550021941
                -1.71965348409,0.0192423100615
                -1.71027550423,0.0194363730738
                -1.70089752436,0.0196351704884
                -1.69162389194,0.0198409971793
                -1.68235025952,0.0200540660706
                -1.6730766271,0.0202745916946
                -1.66380299467,0.0205027899615
                -1.65452936225,0.02073887793
                -1.64525572983,0.020983073579
                -1.63598209741,0.0212355955846
                -1.62670846498,0.0214966631042
                -1.61743483256,0.0217664955691
                -1.60816120014,0.0220453124902
                -1.59888756772,0.022333471474
                -1.58960948567,0.0226310625671
                -1.58033140362,0.0229383048224
                -1.57105332157,0.0232554167633
                -1.56177523952,0.023582616287
                -1.55249715747,0.0239201205956
                -1.54321907542,0.0242681461568
                -1.53394099338,0.0246269086971
                -1.52466291133,0.0249966232284
                -1.51538482928,0.0253775041118
                -1.50610674723,0.0257697651587
                -1.49682866518,0.0261736197722
                -1.48755058313,0.0265836424011
                -1.47839836455,0.027005359636
                -1.46924614597,0.0274389763433
                -1.4600939274,0.0278846979307
                -1.45094170882,0.0283427306799
                -1.44178949024,0.0288132821205
                -1.43263727166,0.0292965614457
                -1.42348505308,0.0297927799704
                -1.4143328345,0.0303152825715
                -1.40494468358,0.030851856601
                -1.39555653267,0.0314027405368
                -1.38616838175,0.031968177715
                -1.37678023084,0.0325484170827
                -1.36739207992,0.0331437139945
                -1.35800392901,0.0336773553608
                -1.34979926845,0.0342228912317
                -1.3415946079,0.0347805075474
                -1.33338994735,0.0353503959795
                -1.32518528679,0.0359327544353
                -1.31698062624,0.0365277875777
                -1.30877596568,0.037189247097
                -1.29984871743,0.0378662350499
                -1.29092146918,0.0385590464005
                -1.28199422093,0.0392679888154
                -1.27306697268,0.0399933835692
                -1.26413972443,0.0407355664702
                -1.25521247617,0.0414691158932
                -1.2465882365,0.042218998189
                -1.23796399683,0.042985560052
                -1.22933975716,0.0437691641737
                -1.22071551749,0.0445701900923
                -1.21209127782,0.0453890350541
                -1.20346703814,0.0462969685374
                -1.19411280971,0.0472268889407
                -1.18475858127,0.0481793799443
                -1.17540435283,0.0491550547996
                -1.1660501244,0.0500725456941
                -1.15746343646,0.0510106606396
                -1.14887674852,0.0519699467484
                -1.14029006057,0.0529509759068
                -1.13170337263,0.0538749827036
                -1.12379586112,0.0548184435507
                -1.1158883496,0.0557818656252
                -1.10798083809,0.0567657764396
                -1.10007332658,0.0577707244348
                -1.09216581506,0.0587972795687
                -1.08425830355,0.0597804340457
                -1.07684540892,0.0607836203764
                -1.0694325143,0.0618073629425
                -1.06201961967,0.062852204472
                -1.05460672504,0.0640128497574
                -1.04653947202,0.0651998670123
                -1.038472219,0.0664140319706
                -1.03040496598,0.0676561483201
                -1.02233771296,0.069119626523
                -1.01304803661,0.0706225028906
                -1.00375836026,0.0721661443714
                -0.994468683914,0.0737519707693
                -0.985179007564,0.0753239520712
                -0.9762171582,0.0769379611627
                -0.967255308835,0.0785954176448
                -0.958293459471,0.0800195728129
                -0.950796234257,0.0814761348301
                -0.943299009044,0.0829660155042
                -0.93580178383,0.0845238566841
                -0.928138758754,0.0861184983686
                -0.920475733678,0.0877509919646
                -0.912812708603,0.089270684134
                -0.905845329545,0.0908234293074
                -0.898877950488,0.0924100751427
                -0.89191057143,0.0939915496031
                -0.88511480793,0.0956069282325
                -0.878319044429,0.0972570463223
                -0.871523280929,0.0993485998843
                -0.863091394306,0.101496440839
                -0.854659507683,0.103395381391
                -0.847400686601,0.105338480511
                -0.840141865518,0.10714788791
                -0.833536401772,0.108995691906
                -0.826930938026,0.110875479446
                -0.820350974069,0.112795108563
                -0.813771010111,0.114998755692
                -0.806374438904,0.117255072452
                -0.798977867697,0.11927543316
                -0.792509499815,0.121338002869
                -0.786041131934,0.123755311505
                -0.778615433742,0.126230688345
                -0.77118973555,0.129146171579
                -0.762648892581,0.132142272115
                -0.754108049612,0.134354801413
                -0.747970438861,0.136611033898
                -0.741832828109,0.13920988602
                -0.734899982076,0.141866654667
                -0.727967136042,0.14403625253
                -0.722428789475,0.146244266446
                -0.716890442908,0.148779616976
                -0.71064151753,0.151365510826
                -0.704392592153,0.153943852631
                -0.698283465609,0.156572232332
                -0.692174339065,0.158850302356
                -0.686980026931,0.161165752258
                -0.681785714798,0.16416990999
                -0.675154995604,0.16839901693
                -0.666011733663,0.171313606179
                -0.65988713325,0.174284083445
                -0.653762532837,0.176770969235
                -0.648731248209,0.179296776079
                -0.643699963581,0.182402743803
                -0.637608170109,0.186131667102
                -0.630430213832,0.189838167968
                -0.623450682114,0.194290001978
                -0.615244598857,0.198462377877
                -0.607743611736,0.201374004127
                -0.60262714211,0.204331157455
                -0.597510672485,0.207943911857
                -0.591355955037,0.212662905412
                -0.583464787102,0.217948866145
                -0.574833416641,0.222634045639
                -0.567379236008,0.227580442692
                -0.559683754307,0.231451908435
                -0.553798119442,0.23535793802
                -0.547963807185,0.239457378388
                -0.541946730787,0.245063943314
                -0.533864546016,0.250210457861
                -0.526623042093,0.255203096025
                -0.519748892772,0.259965078642
                -0.513326146021,0.264298479919
                -0.507593112355,0.268370167697
                -0.502298404968,0.27300306754
                -0.496369229754,0.277945074324
                -0.490156614598,0.281891540019
                -0.485287846109,0.286490036386
                -0.47969778739,0.290591504836
                -0.474795918402,0.295558785144
                -0.468947296987,0.299443321598
                -0.464454569873,0.304110178872
                -0.459130882294,0.308436653201
                -0.454275647852,0.312002823915
                -0.450333169361,0.315914921093
                -0.44606074108,0.320383841791
                -0.441244544599,0.324710012135
                -0.436651667201,0.32859384719
                -0.43258723166,0.332497979914
                -0.428553376191,0.338267551605
                -0.422667405281,0.342751744898
                -0.41817718975,0.346641054127
                -0.414337877641,0.350426905489
                -0.410646221707,0.355387709298
                -0.405865723862,0.359877484382
                -0.401605156475,0.364648782955
                -0.397139328768,0.370233978977
                -0.391986897055,0.374272459394
                -0.388323367673,0.379873806409
                -0.383302629221,0.383367943599
                -0.380221920932,0.387567406085
                -0.376556770985,0.392046245192
                -0.372694900401,0.396319055701
                -0.369057602507,0.401358302886
                -0.364819508829,0.405954113082
                -0.361008697235,0.411782872408
                -0.356236877232,0.416712466199
                -0.352265420627,0.420280027971
                -0.349429515881,0.424387780647
                -0.346195366528,0.430578051681
                -0.341374697823,0.435152179781
                -0.337870429447,0.441156766728
                -0.333324801731,0.446011439744
                -0.32970618999,0.449855575485
                -0.326875993652,0.453644861547
                -0.324113023727,0.459472227808
                -0.319903921649,0.464571304879
                -0.316273494101,0.468900301916
                -0.313229376174,0.473439246656
                -0.310070670798,0.478136271667
                -0.306837045651,0.481661341727
                -0.304436884706,0.486598460371
                -0.301102685112,0.490653043674
                -0.298395403246,0.495822507547
                -0.294975321629,0.501278466761
                -0.291407319694,0.506071037979
                -0.28831072828,0.511598701693
                -0.284776242735,0.516301544614
                -0.281804615126,0.520101280403
                -0.279427357194,0.523705729721
                -0.277190041015,0.528679625498
                -0.274125499582,0.533387151291
                -0.271254235117,0.538150214929
                -0.268376305525,0.542148120904
                -0.265983229176,0.546879588751
                -0.263172898004,0.552857395019
                -0.259654199567,0.557008671858
                -0.257237865517,0.561812156926
                -0.254463126772,0.567135064642
                -0.251414896537,0.572260489058
                -0.248507294383,0.577654371437
                -0.245474463214,0.58285490923
                -0.242576971393,0.586963437347
                -0.240307537967,0.590377097534
                -0.238434450002,0.595438425
                -0.235672340441,0.600040287337
                -0.233180765929,0.605812099538
                -0.230077619983,0.610378989546
                -0.227643281773,0.615441328174
                -0.224962617217,0.620450979329
                -0.222328711637,0.625140809447
                -0.21987981447,0.629799477713
                -0.217462316674,0.632977534765
                -0.215823041634,0.638120159395
                -0.213181011657,0.642898694442
                -0.210741457417,0.647537841422
                -0.208386419797,0.652978493396
                -0.20563910954,0.657674326682
                -0.203282047921,0.662652176245
                -0.200795771194,0.666967622559
                -0.198651166621,0.672075730159
                -0.196123229339,0.676271667755
                -0.194056504178,0.68125866409
                -0.191609203522,0.685297096707
                -0.189635655157,0.689260567489
                -0.187704932275,0.693995538486
                -0.185405264406,0.698302125421
                -0.183320667824,0.702615648627
                -0.181238666064,0.70666284406
                -0.179290410583,0.710780259471
                -0.177312943822,0.715357703766
                -0.17511931924,0.720100612051
                -0.172851392889,0.723875286144
                -0.171050105153,0.729803222275
                -0.168225306759,0.734845574456
                -0.165827069333,0.739951869353
                -0.16340152035,0.744503604366
                -0.161241485047,0.748601567185
                -0.159297912269,0.754583338908
                -0.156461698773,0.758018709612
                -0.154832847307,0.762490206238
                -0.152712245545,0.767590848733
                -0.150291937614,0.773371653771
                -0.147546156799,0.777596752103
                -0.145536067293,0.783816263565
                -0.142572635758,0.790514045904
                -0.139372437559,0.794766017168
                -0.137333216079,0.799945676508
                -0.134842094821,0.806119246603
                -0.131861392516,0.810244119909
                -0.129859182739,0.814706660278
                -0.127684357658,0.819901327203
                -0.125140640872,0.825620935614
                -0.122322677561,0.830232167721
                -0.120033709315,0.835517049189
                -0.11739283515,0.840664725551
                -0.11479900769,0.845095069781
                -0.112546714668,0.849289914567
                -0.110396384319,0.85353596175
                -0.108201367858,0.858483665237
                -0.105620124771,0.864542356942
                -0.102422820439,0.868745329694
                -0.100170619605,0.875355981818
                -0.0965871587282,0.879573957989
                -0.0942552768096,0.883517661457
                -0.0920449396196,0.888457608863
                -0.0892381343691,0.892792457759
                -0.086729570034,0.896287124289
                -0.0846718556888,0.900344194212
                -0.0822471127225,0.904881268173
                -0.0794851855875,0.909544219271
                -0.0765833670756,0.913795366981
                -0.0738723003958,0.918534411143
                -0.0707763666172,0.922423089618
                -0.0681611078191,0.926587146871
                -0.065287371283,0.930544749164
                -0.0624735106906,0.935133423965
                -0.0591094067441,0.938750594571
                -0.0563531157943,0.942671308929
                -0.053264358753,0.947573932686
                -0.0492478529732,0.953466579705
                -0.0441529422496,0.958618723753
                -0.0393588547595,0.962945148792
                -0.035021641245,0.967431443332
                -0.0301875941058,0.972514493602
                -0.0242186745956,0.978275969973
                -0.0166309151935,0.982687338966
                -0.00981193704004,0.98645167652
                -0.00299295888661,0.990493123245
                0.00571455093136,0.993657683074
                0.0144220607493,0.996067418188
                0.0231295705673,0.997847806815
                0.0318370803853,0.99912100249];
        end
        
<<<<<<< HEAD
        function n = mixSampling(N,p,mixtureType)
            % Probability Distribution Data Generation function
            % Created By: Zach D. Merino a MS candidate
            % Updated: 3/22/19
            %--------------------------------------------------------------------------
            % This function generates the size of the sample to be taken from each
            % individual distrbution in a mixture distribution. This method uses
            % random sampling from a binomial distribution. This method can easily be
            % generalized to any size mixture, but for practial use the option to
            % created a mixture from 2-5 has been included.
            %--------------------------------------------------------------------------
            % n = vector of subsamples for each distribution in the mixture
            % N = sample size to take from total mixture distribution
            % p = vector of probability weights for each distribution in the mixture
            
            switch mixtureType
=======
        function n = mixSampling(N,p,mix_type)
            % Probability Distribution Data Generation function
            %--------------------------------------------------------------
            % This function generates the size of the sample to be taken 
            % from each individual distrbution in a mixture.
            % Random sampling from a binomial distribution is used. 
            % Note: This method can easily be generalized to any size 
            % mixture, but for practial use the option to created a
            % mixture from 2-5 has been included.
            %--------------------------------------------------------------
            % n = vector of subsamples for each distribution in the mixture
            % N = sample size to take from total mixture distribution
            % p = vector of probability weights for each distribution in
            % the mixture
            
            switch mix_type
>>>>>>> distro_code
                case "two"
                    
                    % get random sample from binomial distribution
                    n1 = binornd(N,p(1));
<<<<<<< HEAD
                    % find sample points for last distribution in the mixture
=======
                    % find sample points for last distribution in the
                    % mixture
>>>>>>> distro_code
                    n2 = N - n1;
                    % save number of samples to take from each distribution
                    n = [n1,n2];
                    
                case "three"
                    
                    % get random sample from binomial distribution
                    n1 = binornd(N,p(1));
<<<<<<< HEAD
                    % get random sample from binomial distribution with conditional
                    % probabilies
                    n2 = binornd(N-n1,p(2)/(p(2)+p(3)));
                    % find sample points for last distribution in the mixture
=======
                    % get random sample from binomial distribution with
                    % conditional

                    % probabilies
                    n2 = binornd(N-n1,p(2)/(p(2)+p(3)));
                    % find sample points for last distribution in the
                    % mixture
>>>>>>> distro_code
                    n3 = N - n1 - n2;
                    % save number of samples to take from each distribution
                    n = [n1,n2,n3];
                    
                case "four"
                    
                    % get random sample from binomial distribution
                    n1 = binornd(N,p(1));
<<<<<<< HEAD
                    % get random sample from binomial distribution with conditional
                    % probabilies
                    n2 = binornd(N-n1,p(2)/(p(2)+p(3)+p(4)));
                    n3 = binornd(N-n1-n2,p(3)/(p(3)+p(4)));
                    % find sample points for last distribution in the mixture
=======
                    % get random sample from binomial distribution with
                    % conditional

                    % probabilies
                    n2 = binornd(N-n1,p(2)/(p(2)+p(3)+p(4)));
                    n3 = binornd(N-n1-n2,p(3)/(p(3)+p(4)));
                    % find sample points for last distribution in the 
                    % mixture
>>>>>>> distro_code
                    n4 = N - n1 - n2 - n3;
                    % save number of samples to take from each distribution
                    n = [n1,n2,n3,n4];
                    
                case "five"
                    
                    % get random sample from binomial distribution
                    n1 = binornd(N,p(1));
<<<<<<< HEAD
                    % get random sample from binomial distribution with conditional
=======
                    % get random sample from binomial distribution with
                    % conditional

>>>>>>> distro_code
                    % probabilies
                    n2 = binornd(N-n1,p(2)/(p(2)+p(3)+p(4)+p(5)));
                    n3 = binornd(N-n1-n2,p(3)/(p(3)+p(4)+p(5)));
                    n4 = binornd(N-n1-n2-n3,p(4)/(p(4)+p(5)));
<<<<<<< HEAD
                    % find sample points for last distribution in the mixture
=======
                    % find sample points for last distribution in the
                    % mixture
>>>>>>> distro_code
                    n5 = N - n1 - n2 - n3 - n4;
                    % save number of samples to take from each distribution
                    n = [n1,n2,n3,n4,n5];
                    
                case "six"
                    
                    % get random sample from binomial distribution
                    n1 = binornd(N,p(1));
<<<<<<< HEAD
                    % get random sample from binomial distribution with conditional
=======
                    % get random sample from binomial distribution with
                    % conditional

>>>>>>> distro_code
                    % probabilies
                    n2 = binornd(N-n1,p(2)/(p(2)+p(3)+p(4)+p(5)+p(6)));
                    n3 = binornd(N-n1-n2,p(3)/(p(3)+p(4)+p(5)+p(6)));
                    n4 = binornd(N-n1-n2-n3,p(4)/(p(4)+p(5)+p(6)));
                    n5 = binornd(N-n1-n2-n3-n4,p(5)/(p(5)+p(6)));
<<<<<<< HEAD
                    % find sample points for last distribution in the mixture
=======
                    % find sample points for last distribution in the
                    % mixture
>>>>>>> distro_code
                    n6 = N - n1 - n2 - n3 - n4 - n5;
                    % save number of samples to take from each distribution
                    n = [n1,n2,n3,n4,n5,n6];
            end
        end
<<<<<<< HEAD
    
        function C = reshape_groups(groups, data)
            [row, col] = size(data);

            group = zeros(col, 1);
            C = [];

            for i = 1:row
                new = reshape(data(i,:),[col,1]);

                for j = 1:col
                    group(j) = groups(i);
                end

                C = [C; horzcat(group, new)];
            end
        end
=======
>>>>>>> distro_code

    end
end    
